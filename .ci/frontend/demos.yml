# âœ… **Demo Applications**
.demos-regex: &demos-regex /^demo\/[A-Z]+-\d+$/
# Build Stage (Refactored for Dynamic Processing)
demos:
  stage: build
  only:
    - *demos-regex  # ðŸ”¥ Reacts to demo_* branches
  variables:
    NX_VERSION: "${CI_COMMIT_REF_NAME}"
    FE_PROD: "true"
  tags:
    - bobthebuilder
    - typescript
  before_script:
    - npm ci --cache .npm
  script:
    - |
      echo "Setting up projects..."
      SEPARATED_LIST="christmas"  # Ensure this is a proper space-separated string
      echo "Building projects: ${SEPARATED_LIST}"

      # Stage Build
      echo "Running stage build..."
      cp "$FE_DEMO_STAGE" ./.env
      export FE_ENVIRONMENT_NAME="stormblast"
      export FE_ENVIRONMENT_TYPE="stage"
      nx run-many --target=build-vars --c=prod --parallel --maxParallel=4 --projects="${SEPARATED_LIST}"
      for project in ${SEPARATED_LIST}; do
        echo "Processing project: $project"
        mkdir -p "./dist/apps/frontend/demo/${FE_ENVIRONMENT_TYPE}/$project"
        mv "./dist/apps/frontend/demo/$project/"* "./dist/apps/frontend/demo/${FE_ENVIRONMENT_TYPE}/$project/"
      done

      # Prod Build
      echo "Running prod build..."
      cp "$FE_DEMO_PROD" ./.env
      export FE_ENVIRONMENT_NAME="ragnarok"
      export FE_ENVIRONMENT_TYPE="prod"
      nx run-many --target=build-vars --c=prod --parallel --maxParallel=4 --projects="${SEPARATED_LIST}"
      for project in ${SEPARATED_LIST}; do
        echo "Processing project: $project"
        mkdir -p "./dist/apps/frontend/demo/${FE_ENVIRONMENT_TYPE}/$project"
        mv "./dist/apps/frontend/demo/$project/"* "./dist/apps/frontend/demo/${FE_ENVIRONMENT_TYPE}/$project/"
      done
  cache:
    paths:
      - .npm
  artifacts:
    paths:
      - dist

# Deployment Template (Dynamically deploys all demos)
.fe-deploy-template: &fe-deploy-template
  when: manual
  only:
    - *demos-regex  # ðŸ”¥ Reacts to demo_* branches
  tags:
    - bobthebuilder
    - typescript
  needs:
    - demos
  before_script:
    - mc alias set naglfar "$MINIO_NAGLFAR_URL" "$NAGLFAR_USERNAME" "$NAGLFAR_PASSWORD"
    - mc alias set stormblast "$MINIO_STORMBLAST_URL" "$STORMBLAST_USERNAME" "$STORMBLAST_PASSWORD"
    - mc alias set ragnarok "$MINIO_RAGNAROK_URL" "$RAGNAROK_USERNAME" "$RAGNAROK_PASSWORD"
  script:
    - |
      echo "Deploying to ${FE_ENVIRONMENT_NAME}/${BUCKET_NAME}"
      mc mb "${FE_ENVIRONMENT_NAME}/${BUCKET_NAME}" --p
      mc policy set public "${FE_ENVIRONMENT_NAME}/${BUCKET_NAME}"
      mc rm "${FE_ENVIRONMENT_NAME}/${BUCKET_NAME}" --recursive --force
      mc cp "dist/apps/frontend/${SUB_FOLDER}/${FE_ENVIRONMENT_TYPE}/${PROJECT_NAME}/" "${FE_ENVIRONMENT_NAME}/${BUCKET_NAME}" --recursive

# Deploy Demos Dynamically (Using parallel matrix)
deploy-demos:
  extends: .fe-deploy-template
  parallel:
    matrix:
      - FE_ENVIRONMENT_NAME: [stormblast, ragnarok]
        FE_ENVIRONMENT_TYPE: [stage, prod]
        BUCKET_NAME: [christmas]  # Add more projects if needed
        PROJECT_NAME: [christmas]
        SUB_FOLDER: [demo]
