## ========================== GLOBAL VARIABLES ==========================
variables:
  DOCKER_REGISTRY: "gitlab.arcware.cloud:5050/development/arcware-cloud"
  KUBERNETES_NAMESPACE: "micro-cloud"
  CYPRESS_CACHE_FOLDER: "cypress"

## ========================== REGEX ANCHORS ==========================
.backend: &backend
  rules:
    - if: '$CI_COMMIT_REF_NAME && $CI_COMMIT_REF_NAME =~ /^backend\/[A-Z]+-\d+$/ && $CI_COMMIT_MESSAGE && $CI_COMMIT_MESSAGE =~ /run-ci/'

## ========================== CACHE TEMPLATES ==========================
.npm-cache: &npm-cache
  cache:
    key: npm-cache-${CI_COMMIT_REF_NAME}
    policy: pull-push
    paths:
      - node_modules
      - cypress
      - .npm

## ========================== BUILD JOB ==========================
micro-cloud:
  stage: build-backend
  tags:
    - bobthebuilder
    - typescript
  script:
    - export CYPRESS_CACHE_FOLDER=cypress
    - npm ci
    - npm run backend || exit 1

    # Read version from the dedicated version file
    - |
      FINAL_VERSION=$(cat .ci/versions/backend.txt)
      echo "üèóÔ∏è Building version: ${FINAL_VERSION}"
    
    # Secure Docker Login and Build/Push
    - |
      echo "$CI_REGISTRY_PASSWORD" | docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" --password-stdin
      DOCKER_IMAGE="${DOCKER_REGISTRY}/mc:${FINAL_VERSION}"
      echo "Building Docker image: ${DOCKER_IMAGE}"
      docker build -f ./mc.Dockerfile -t "${DOCKER_IMAGE}" .
      echo "Pushing Docker image: ${DOCKER_IMAGE}"
      docker push "${DOCKER_IMAGE}"
  
  artifacts:
    paths:
      - dist/apps/node
    expire_in: 1 week
  <<: *npm-cache
  rules:
    - if: '$CI_COMMIT_REF_NAME && $CI_COMMIT_REF_NAME =~ /^backend\/[A-Z]+-\d+$/ && $CI_COMMIT_MESSAGE && $CI_COMMIT_MESSAGE =~ /run-ci/'
  when: manual

## ========================== DEPLOYMENT TEMPLATE ==========================
.deploy-template: &deploy-template
  tags:
    - bobthebuilder
    - typescript
  script:
    - |
      FINAL_VERSION=$(cat .ci/versions/backend.txt)
      echo "üöÄ Deploying version: ${FINAL_VERSION}"
      echo "----------------------------------"
    
    # Set up kubectl with environment context
    - kubectl config use-context "development/arcware-cloud:${ENV}"
    - kubectl config set-context --current --namespace=${KUBERNETES_NAMESPACE}
    
    # Update service deployment file
    - cd "./k8s/${SERVICE}/base"
    - sed -i "s|<VERSION>|${FINAL_VERSION}|g" deployment.yml
    - echo "üìÑ Updated deployment.yml for ${SERVICE}:"
    - cat deployment.yml
    - echo "----------------------------------"
    
    # Apply the deployment
    - |
      kubectl apply -f deployment.yml || {
        echo "‚ùå Deployment failed for ${SERVICE} in ${ENV}"
        cat deployment.yml
        exit 1
      }
      echo "‚úÖ Deployment successful for ${SERVICE} in ${ENV}"
    
    # Verify deployment rollout
    - |
      kubectl rollout status deployment/${SERVICE} --timeout=300s || {
        echo "‚ùå Deployment rollout timed out for ${SERVICE} in ${ENV}"
        kubectl get pods -l app=${SERVICE}
        exit 1
      }
  when: manual
  needs:
    - job: micro-cloud
      artifacts: true

## ========================== SERVICE LIST ==========================
.common-services: &common-services
  - distribution-service
  - instance-prediction
  - project-service
  - runner-service
  - instance-service
  - schedule-service
  - payment-service
  - signalling-client
  - signalling-stream
  - unreal-upload-manager

## ========================== DEPLOYMENT JOBS ==========================
deploy-area51:
  stage: deploy-backend
  extends: .deploy-template
  needs:
    - job: micro-cloud  
  parallel:
    matrix:
      - SERVICE: *common-services
  variables:
    ENV: area51
  environment:
    name: area51
  rules:
    - if: '$CI_COMMIT_REF_NAME && $CI_COMMIT_REF_NAME =~ /^backend\/[A-Z]+-\d+$/ && $CI_COMMIT_MESSAGE && $CI_COMMIT_MESSAGE =~ /run-ci/'

deploy-naglfar:
  stage: deploy-backend
  extends: .deploy-template
  needs:
    - job: micro-cloud  
  parallel:
    matrix:
      - SERVICE: *common-services
  variables:
    ENV: naglfar
  environment:
    name: naglfar
  rules:
    - if: '$CI_COMMIT_REF_NAME && $CI_COMMIT_REF_NAME =~ /^backend\/[A-Z]+-\d+$/ && $CI_COMMIT_MESSAGE && $CI_COMMIT_MESSAGE =~ /run-ci/'

deploy-stormblast:
  stage: deploy-backend
  extends: .deploy-template
  needs:
    - job: micro-cloud  
  parallel:
    matrix:
      - SERVICE: *common-services
  variables:
    ENV: stormblast
  environment:
    name: stormblast
  rules:
    - if: '$CI_COMMIT_REF_NAME && $CI_COMMIT_REF_NAME =~ /^backend\/[A-Z]+-\d+$/ && $CI_COMMIT_MESSAGE && $CI_COMMIT_MESSAGE =~ /run-ci/'

deploy-ragnarok:
  stage: deploy-backend
  extends: .deploy-template
  needs:
    - job: micro-cloud  
  parallel:
    matrix:
      - SERVICE: *common-services
  variables:
    ENV: ragnarok
  environment:
    name: ragnarok
  <<: *backend

## ========================== CLEANUP STAGE ==========================
cleanup:
  stage: cleanup
  <<: *backend
  rules:
    - if: '$CI_COMMIT_REF_NAME && $CI_COMMIT_REF_NAME =~ /^backend\/[A-Z]+-\d+$/ && $CI_COMMIT_MESSAGE && $CI_COMMIT_MESSAGE =~ /run-ci/'
  needs:
    - deploy-area51
    - deploy-naglfar
    - deploy-stormblast
    - deploy-ragnarok
  script:
    - echo "üßπ Cleaning up temporary files..."
    - rm -rf dist
    - find . -name ".npm" -type d -exec rm -rf {} +
    - echo "‚úÖ Cleanup completed successfully"
  when: manual
