# âœ… **Repository Service Builds**
.repository-service-regex: &repository-service-regex /^repository-service\/[A-Z]+-\d+$/

# Reusable rule combining branch regex and commit message trigger for repository-service
.repository-service-rule: &repository-service-rule
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^repository-service\/[A-Z]+-\d+$/ && $CI_COMMIT_MESSAGE && $CI_COMMIT_MESSAGE =~ /run-repo/'

repository-service-build:
  stage: build
  <<: *repository-service-rule
  tags:
    - bobthebuilder
    - typescript
  script:
    - dotnet publish "apps/dotnet/repository-service/repository-service-grpc/repository-service-grpc.csproj" -f net7.0 -r linux-x64 -c Release -o apps/dotnet/repository-service/publish
  artifacts:
    paths:
      - apps/dotnet/repository-service/publish/

repository-service-image:
  stage: image
  <<: *repository-service-rule
  tags:
    - bobthebuilder
    - typescript
  needs:
    - repository-service-build
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      # Read version from .ci/versions/repo.txt
      VERSION=$(cat .ci/versions/repo.txt)
      echo "Building Repository Service container with version: ${VERSION}"
    - docker build -f ./apps/dotnet/repository-service/Dockerfile -t ${CI_REGISTRY}/repository-service:${VERSION} .
    - docker push ${CI_REGISTRY}/repository-service:${VERSION}

deploy-repository-service-area51:
  stage: deploy
  <<: *repository-service-rule
  tags:
    - repo01
  needs:
    - repository-service-image
  variables:
    GENERAL_ARGS: --restart=always
    NAME: "repository-service-area51"
  script:
    - sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      # Read version from .ci/versions/repo.txt
      VERSION=$(cat .ci/versions/repo.txt)
      echo "Deploying Repository Service version: ${VERSION}"
    - sudo docker pull ${CI_REGISTRY}/repository-service:${VERSION}
    - sudo docker stop $NAME || echo "There is no docker to stop"
    - sudo docker rm $NAME || echo "There is no docker to remove"
    - sudo mkdir -p /data/repository/area51
    - |
      sudo docker run \
        --name $NAME \
        --log-opt max-size=10m --log-opt max-file=3 \
        $GENERAL_ARGS \
        -e PROD_AWS_ACCESS_KEY=$UNREAL_UPLOAD_API_ACCESS_KEY \
        -e PROD_AWS_SECRET_KEY=$UNREAL_UPLOAD_API_SECRET_KEY \
        -e PROD_REPOSITORY_PORT=8081 \
        -e PROD_MESSAGE_BROKER_SERVER=http://10.200.1.21:7999 \
        -e PROD_PATH_TO_REPOSITORY="/repository" \
        -e PROD_UPLOAD_SLOTS=5 \
        -v /data/repository/area51:/repository \
        --log-opt max-size=10m --log-opt max-file=3 \
        -d \
        --network=host \
        ${CI_REGISTRY}/repository-service:${VERSION}
    - sudo docker system prune -af --volumes
  when: manual

deploy-repository-service-naglfar:
  stage: deploy
  <<: *repository-service-rule
  tags:
    - repo01
  needs:
    - repository-service-image
  variables:
    GENERAL_ARGS: --restart=always
    NAME: "repository-service-naglfar"
  script:
    - sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      VERSION=$(cat .ci/versions/repo.txt)
      echo "Deploying Repository Service version: ${VERSION}"
    - sudo docker pull ${CI_REGISTRY}/repository-service:${VERSION}
    - sudo docker stop $NAME || echo "There is no docker to stop"
    - sudo docker rm $NAME || echo "There is no docker to remove"
    - sudo mkdir -p /data/repository/naglfar
    - |
      sudo docker run \
        --name $NAME \
        --log-opt max-size=10m --log-opt max-file=3 \
        $GENERAL_ARGS \
        -e PROD_AWS_ACCESS_KEY=$UNREAL_UPLOAD_API_ACCESS_KEY \
        -e PROD_AWS_SECRET_KEY=$UNREAL_UPLOAD_API_SECRET_KEY \
        -e PROD_REPOSITORY_PORT=8082 \
        -e PROD_MESSAGE_BROKER_SERVER=http://10.201.1.21:7999 \
        -e PROD_PATH_TO_REPOSITORY="/repository" \
        -e PROD_UPLOAD_SLOTS=5 \
        -v /data/repository/naglfar:/repository \
        --log-opt max-size=10m --log-opt max-file=3 \
        -d \
        --network=host \
        ${CI_REGISTRY}/repository-service:${VERSION}
    - sudo docker system prune -af --volumes
  when: manual

deploy-repository-service-stormblast:
  stage: deploy
  <<: *repository-service-rule
  tags:
    - repo01
  needs:
    - repository-service-image
  variables:
    GENERAL_ARGS: --restart=always
    NAME: "repository-service-stormblast"
  script:
    - sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      VERSION=$(cat .ci/versions/repo.txt)
      echo "Deploying Repository Service version: ${VERSION}"
    - sudo docker pull ${CI_REGISTRY}/repository-service:${VERSION}
    - sudo docker stop $NAME || echo "There is no docker to stop"
    - sudo docker rm $NAME || echo "There is no docker to remove"
    - sudo mkdir -p /data/repository/stormblast
    - |
      sudo docker run \
        --name $NAME \
        --log-opt max-size=10m --log-opt max-file=3 \
        $GENERAL_ARGS \
        -e PROD_AWS_ACCESS_KEY=$UNREAL_UPLOAD_API_ACCESS_KEY \
        -e PROD_AWS_SECRET_KEY=$UNREAL_UPLOAD_API_SECRET_KEY \
        -e PROD_REPOSITORY_PORT=8083 \
        -e PROD_MESSAGE_BROKER_SERVER=http://10.202.1.21:7999 \
        -e PROD_PATH_TO_REPOSITORY="/repository" \
        -e PROD_UPLOAD_SLOTS=5 \
        -e TAGS=demuc01 \
        -v /data/repository/stormblast:/repository \
        --log-opt max-size=10m --log-opt max-file=3 \
        -d \
        --network=host \
        ${CI_REGISTRY}/repository-service:${VERSION}
    - sudo docker system prune -af --volumes
  when: manual

deploy-repository-service-ragnarok:
  stage: deploy
  <<: *repository-service-rule
  tags:
    - repo01
  needs:
    - repository-service-image
  variables:
    GENERAL_ARGS: --restart=always
    NAME: "repository-service-ragnarok"
  script:
    - sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - |
      VERSION=$(cat .ci/versions/repo.txt)
      echo "Deploying Repository Service version: ${VERSION}"
    - sudo docker pull ${CI_REGISTRY}/repository-service:${VERSION}
    - sudo docker stop $NAME || echo "There is no docker to stop"
    - sudo docker rm $NAME || echo "There is no docker to remove"
    - sudo mkdir -p /data/repository/ragnarok
    - |
      sudo docker run \
        --name $NAME \
        --log-opt max-size=10m --log-opt max-file=3 \
        $GENERAL_ARGS \
        -e PROD_AWS_ACCESS_KEY=$UNREAL_UPLOAD_API_ACCESS_KEY \
        -e PROD_AWS_SECRET_KEY=$UNREAL_UPLOAD_API_SECRET_KEY \
        -e PROD_REPOSITORY_PORT=8084 \
        -e PROD_MESSAGE_BROKER_SERVER=http://10.203.1.21:7999 \
        -e PROD_PATH_TO_REPOSITORY="/repository" \
        -e PROD_UPLOAD_SLOTS=5 \
        -e TAGS=demuc01 \
        -v /data/repository/ragnarok:/repository \
        --log-opt max-size=10m --log-opt max-file=3 \
        -d \
        --network=host \
        ${CI_REGISTRY}/repository-service:${VERSION}
    - sudo docker system prune -af --volumes
  when: manual
